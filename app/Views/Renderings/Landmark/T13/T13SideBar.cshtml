@using Landmark.Classes
@using Landmark.Helper
@using Sitecore.Collections
@using Sitecore.ContentSearch.Utilities
@using Sitecore.Data.Items
@model RenderingModel
@{
    string[] alphabetsStrings = new[] { "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z" };
    Item currentPage = Sitecore.Context.Item;
    Item parentItem = currentPage.Parent;
    Item byBrandsPage = parentItem.Children.SingleOrDefault(p => p.DisplayName == "By Brands");
    string url = string.Empty;
    if (byBrandsPage.ID.ToString() != currentPage.ID.ToString())
    {
        url = Sitecore.Links.LinkManager.GetItemUrl(byBrandsPage);
    }
    string category = string.Empty;
    var buildings = Sitecore.Context.Database.GetItem(ItemGuids.BuidingsFolder).Children.ToList();

    if (!parentItem.ID.ToString().Equals(ItemGuids.ShoppingItem))
    {
        buildings = LandmarkHelper.GetBuildingsByCategory(parentItem.ID);
        category = LandmarkHelper.GetCurrentCategory();
    }
}
<div class="brand-menu hidden-xs">
    <div class="brand-menu-area">
        <div class="scroll-content">
            <h3>BY BRANDS</h3>
            <ul class="brands-gap brands clearfix">
                @for (int i = 0; i < alphabetsStrings.Length; i++)
                {
                    if (LandmarkHelper.CheckBrandGroup(alphabetsStrings[i], category))
                    {
                        <li><a href="@url#@alphabetsStrings[i].ToUpper()">@alphabetsStrings[i].ToUpper()</a></li>
                    }
                    else
                    {
                        <li class="disabled">@alphabetsStrings[i].ToUpper()</li>
                    }
                }
            </ul>
            <h3>BY BUILDINGS</h3>
            <ul class="brands-gap">
                @foreach (Item buiding in buildings)
                {
                    <li><a href="#">@buiding.Fields["Buiding Title"].Value</a></li>
                }
                <li><a href="#">ALSO CLOSE BY...</a></li>
            </ul>
            <form class="form-goto" data-handler-get-catetories="/fake-handlers/categories.json" action="">
                <h3>
                    GO TO <a class="sub-title" href="#">ALL BRANDS<span class="sprite-small-r">&gt;</span></a>
                </h3>
                <div class="form-group">
                    @{
                        var shoppingItems = LandmarkHelper.GetCategorysInShopping();
                    }
                    <select id="category" name="category" class="selectpicker form-control" data-style="btn-primary" onchange="GetItems(this)">
                        @foreach (var item in shoppingItems)
                        {
                            <option value="@item.ID">@item["Page Title"]</option>
                        }
                    </select>
                    <select id="childcategory" name="childcategory" class="selectpicker form-control" data-style="btn-primary">
                        <option value="Select" selected="selected">--Select--</option>
                    </select>
                    <button type="submit" class="btn btn-default">GO</button>
                </div>
            </form>
            <h3>SEE ALSO</h3>
            <ul>
                <li><a href="#">EYEWEAR</a></li>
                <li><a href="#">ACCESSORIES</a></li>
                <li><a href="#">GADGETS</a></li>
            </ul>
        </div>
    </div>
</div>
<script type="text/javascript">
    function GetItems(id) {
        $('#childcategory').html("");
        $.ajax({
            type: "POST",
            url: '@Url.Action("GetItems", "Shopping")',
            data: { currentId: id },
            success: function (data) {
                $('#childcategory').html(data);
            }
        });
    }
</script>
