@using Landmark.Classes
@using Landmark.Helper
@using Landmark.Models
@using Sitecore.Collections
@using Sitecore.Configuration
@using Sitecore.ContentSearch.Utilities
@using Sitecore.Data.Items
@model RenderingModel
@{
    string[] alphabetsStrings = new[] { "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z" };
    Item currentPage = Sitecore.Context.Item;
    string allByBrandsPageID = ItemGuids.AllByBrandsPage;
    string allByBuildingsPageID = ItemGuids.AllByBuildingsPage;
    Item parentItem = currentPage.Parent;

    while (!parentItem.ID.ToString().Equals(ItemGuids.ShoppingItem) && !parentItem.ID.ToString().Equals(ItemGuids.DiningItem) && parentItem.TemplateID.ToString() != ItemGuids.T11PageTemplate)
    {
        parentItem = parentItem.Parent;
    }
    ShoppingHelper shoppingHelper = new ShoppingHelper();
    List<TextValue> categories = shoppingHelper.GetFirstCategory(currentPage.ID.ToString());
    string allbrands = string.Empty;
    if (shoppingHelper.isDining)
    { allbrands = LandmarkHelper.TranslateUrl(Sitecore.Links.LinkManager.GetItemUrl(Sitecore.Context.Database.GetItem(ItemGuids.DiningAllByBrandPage))); }
    if (shoppingHelper.isShop)
    { allbrands = LandmarkHelper.TranslateUrl(Sitecore.Links.LinkManager.GetItemUrl(Sitecore.Context.Database.GetItem(ItemGuids.AllByBrandsPage))); }

    var brandModels = shoppingHelper.GetBrandModels(parentItem);
    if (!parentItem.ID.ToString().Equals(ItemGuids.ShoppingItem) && !parentItem.ID.ToString().Equals(ItemGuids.DiningItem))
    {
        var currentTag = shoppingHelper.GetCurrentCategory(currentPage);
        brandModels = brandModels.Where(p => p.Tags.Contains(currentTag)).ToList();
    }
    var category = currentPage.Parent.Parent.DisplayName;
    if (currentPage.Parent.Parent.ID.ToString() == ItemGuids.DiningItem || currentPage.Parent.TemplateID.ToString() == ItemGuids.T11PageTemplate)
    {
        category = currentPage.Parent.DisplayName;
    }

    List<TextValue> subCategories = new List<TextValue>();
    var subpage = currentPage.Parent.DisplayName;
}
<div class="brand-menu hidden-xs">
    <div class="brand-menu-area">
        <div class="scroll-content">
            <h3>@Html.Sitecore().Field("Glossary Value", (Item)Factory.GetDatabase("web").GetItem(ItemGuids.ByBrandsGuidItem))</h3>
            <ul class="brands-gap brands clearfix">
                @for (int i = 0; i < alphabetsStrings.Length; i++)
                {
                    if (shoppingHelper.checkBrandStatus(brandModels, alphabetsStrings[i]))
                    {
                        string href = LandmarkHelper.TranslateUrl(Sitecore.Links.LinkManager.GetItemUrl(currentPage.Parent)) + "/by-brands#" + alphabetsStrings[i].ToLower();
                        <li><a href="@href">@alphabetsStrings[i].ToUpper()</a></li>
                    }
                    else
                    {
                        <li class="disabled">@alphabetsStrings[i].ToUpper()</li>
                    }
                }
            </ul>
            <h3>@Html.Sitecore().Field("Glossary Value", (Item)Factory.GetDatabase("web").GetItem(ItemGuids.ByBuidingsGuidItem))</h3>
            <ul class="brands-gap">
                @{
                    List<Item> buidings = LandmarkHelper.GetBuildings();
                    Item firstParentItem = currentPage.Parent;
                    Item allByBuildings = firstParentItem.ID.ToString().Equals(ItemGuids.ShoppingItem) ? Sitecore.Context.Database.GetItem(ItemGuids.AllByBuildingsPage) : currentPage.Parent.Children.Where(item => item.DisplayName == "By Buildings").FirstOrDefault();
                }

                @foreach (Item building in buidings)
                {
                    string href = LandmarkHelper.TranslateUrl(Sitecore.Links.LinkManager.GetItemUrl(currentPage.Parent)) + "/by-buildings#" + building.DisplayName.ToLower().Replace(" ", "");
                    <li><a href="@href">@building.Fields["Building Title"].Value</a></li>
                }
            </ul>
            <form class="form-goto" data-handler-get-catetories="/Service/GetCategoryJson.ashx?id=@currentPage.ID.ToString()" action="@Url.Action("GoTo", "Shopping")">
                <h3>
                    @Html.Sitecore().Field("Glossary Value", (Item)Factory.GetDatabase("web").GetItem(ItemGuids.GoToGuidItem))
                    <a class="sub-title" href="@allbrands">
                        @Html.Sitecore().Field("Glossary Value", (Item)Factory.GetDatabase("web").GetItem(ItemGuids.AllBrandsGuidItem))<span class="sprite-small-r">&gt;</span>
                    </a>
                </h3>
                <div class="form-group">
                    <select id="category" name="category" class="selectpicker form-control" data-style="btn-primary">
                        @foreach (var item in categories)
                        {

                            <option value="@item.value" @if (category == item.DisplayName) { <text>
                                    selected="selected"
                                    </text>                     }>
                                @item.text.ToUpper()
                            </option>
                        }
                    </select>
                    @{
                        var parentCategory = categories.SingleOrDefault(p => p.DisplayName == category);
                        var firestCategory = categories.FirstOrDefault();
                        subCategories = parentCategory != null ? parentCategory.children : firestCategory.children.ToList();
                    }
                    @if (shoppingHelper.isShop)
                    {
                        <select id="childcategory" name="childcategory" class="selectpicker form-control" data-style="btn-primary">
                            @if (subCategories.Any())
                            {
                                foreach (var item in subCategories)
                                {
                                    <option value="@item.value" @if (subpage == item.DisplayName) { <text>
                                            selected="selected"
                                            </text>         }>
                                        @item.text.ToUpper()
                                    </option>
                                }
                            }
                        </select>
                    }
                    <input type="hidden" value="@currentPage.Parent.TemplateID.ToString()" name="parentTemplateId" class="selectpicker form-control" />
                    <input type="hidden" value="@ItemGuids.T11PageTemplate" name="pageTemplateId" class="selectpicker form-control" />

                    <button type="submit" class="btn btn-default">@Html.Sitecore().Field("Glossary Value", (Item)Factory.GetDatabase("web").GetItem(ItemGuids.GoGuidItem))</button>
                </div>
            </form>
            @if (allByBrandsPageID != currentPage.ID.ToString() && allByBuildingsPageID != currentPage.ID.ToString())
            {
                <h3>@Html.Sitecore().Field("Glossary Value", (Item)Factory.GetDatabase("web").GetItem(ItemGuids.SeeAlsoGuidItem))</h3>
                <ul>
                    @Html.Sitecore().Rendering(SitecoreRenderingViewGuids.T13RelatedCategoryViewGuid)
                </ul>
            }
        </div>
    </div>
</div>
