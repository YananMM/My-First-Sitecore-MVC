@using Landmark.Classes
@using Landmark.Helper
@using Landmark.Models
@using Sitecore.Configuration
@using Sitecore.Data.Items
@model RenderingModel

@{
    ShoppingHelper shoppingHelper = new ShoppingHelper();
    string[] alphabetsStrings = new[] { "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z" };
    Item currentItem = Sitecore.Context.Item;
    string allByBrandsPageID = ItemGuids.AllByBrandsPage;
    string allByBuildingsPageID = ItemGuids.AllByBuildingsPage;
    Item pageItem = currentItem.Parent;
    Item parentItem = currentItem.Parent;

    while (!parentItem.ID.ToString().Equals(ItemGuids.ShoppingItem) && !parentItem.ID.ToString().Equals(ItemGuids.DiningItem) && parentItem.TemplateID.ToString() != ItemGuids.T11PageTemplate)
    {
        parentItem = parentItem.Parent;
    }
    List<TextValue> categories = shoppingHelper.GetFirstCategory(currentItem.ID.ToString());
    var category = currentItem.Parent.Parent.DisplayName;
    if (currentItem.Parent.Parent.ID.ToString() == ItemGuids.DiningItem || currentItem.Parent.TemplateID.ToString() == ItemGuids.T11PageTemplate)
    {
        category = currentItem.Parent.DisplayName;
    }
    string allbrands = string.Empty;
    
    List<TextValue> subCategories = new List<TextValue>();
    List<LandmarkBrandModel> brandModels = new List<LandmarkBrandModel>();
    if (pageItem.TemplateID.ToString() == ItemGuids.ShoppingSubCategoryPageObject)
    {
        pageItem = currentItem.Parent.Parent.Parent;
    }
    else if (pageItem.TemplateID.ToString() == ItemGuids.T11PageTemplate)
    {
        pageItem = currentItem.Parent.Parent;
    }
    if (shoppingHelper.isDining)
    {
        allbrands = LandmarkHelper.TranslateUrl(Sitecore.Links.LinkManager.GetItemUrl(Sitecore.Context.Database.GetItem(ItemGuids.DiningAllByBrandPage)));
    }
    if (shoppingHelper.isShop)
    {
        allbrands = LandmarkHelper.TranslateUrl(Sitecore.Links.LinkManager.GetItemUrl(Sitecore.Context.Database.GetItem(ItemGuids.AllByBrandsPage)));
    }

    brandModels = shoppingHelper.GetBrandModels(pageItem);

    if (!currentItem.Parent.ID.ToString().Equals(ItemGuids.ShoppingItem) && !currentItem.Parent.ID.ToString().Equals(ItemGuids.DiningItem))
    {
        var currentTag = shoppingHelper.GetCurrentCategory(currentItem);
        brandModels = brandModels.Where(p => p.Tags.Contains(currentTag)).ToList();
    }
    
    var subpage = currentItem.Parent.DisplayName;
}

<div class="visible-xs-block">
    <button type="button" class="btn btn-default btn-block btn-brand popup-trigger" data-popup="#mobile-sort-and-go" aria-expanded="true"> @Html.Sitecore().Field("Glossary Value", Factory.GetDatabase("web").GetItem(ItemGuids.SortAndGoToItem)) </button>
    <div id="mobile-sort-and-go" class="popup-overlay hide">
        <div class="brand-menu-area popup-content">
            <a class="close-popup" href="">@Html.Sitecore().Field("Glossary Value", (Item)Factory.GetDatabase("web").GetItem(ItemGuids.SortAndGoToItem)) </a>
            <h3>@Html.Sitecore().Field("Glossary Value", (Item)Factory.GetDatabase("web").GetItem(ItemGuids.ByBrandsGuidItem))</h3>
            <ul class="brands clearfix">
                @* @Html.Sitecore().Rendering(SitecoreRenderingViewGuids.ByBrandsRenderingViewGuid)*@
                @for (int i = 0; i < alphabetsStrings.Length; i++)
                {
                    if (shoppingHelper.checkBrandStatus(brandModels, alphabetsStrings[i]))
                    {
                        string href = LandmarkHelper.TranslateUrl(Sitecore.Links.LinkManager.GetItemUrl(currentItem.Parent)) + "/by-brands#" + alphabetsStrings[i].ToLower();
                        <li><a href="@href">@alphabetsStrings[i].ToUpper()</a></li>
                    }
                    else
                    {
                        <li class="disabled">@alphabetsStrings[i].ToUpper()</li>
                    }
                }


            </ul>
            <h3>@Html.Sitecore().Field("Glossary Value", (Item)Factory.GetDatabase("web").GetItem(ItemGuids.ByBuidingsGuidItem))</h3>
            <ul class="brands-gap">
                @{
                    List<Item> buidings = LandmarkHelper.GetBuildings();
                    Item contextItem = Sitecore.Context.Item;
                    Item firstParentItem = contextItem.Parent;
                    Item allByBuildings = firstParentItem.ID.ToString().Equals(ItemGuids.ShoppingItem) ? Sitecore.Context.Database.GetItem(ItemGuids.AllByBuildingsPage) : contextItem.Parent.Children.Where(item => item.DisplayName == "By Buildings").FirstOrDefault();
                }

                @foreach (Item building in buidings)
                {
                    if (allByBuildings != null)
                    {
                        string href = LandmarkHelper.TranslateUrl(Sitecore.Links.LinkManager.GetItemUrl(allByBuildings)) + "#" + building.DisplayName.ToLower().Replace(" ", "");
                        <li><a href="@href">@building.Fields["Building Title"].Value</a></li>
                    }
                }
            </ul>
            <form class="form-goto" data-handler-get-catetories="/Service/GetCategoryJson.ashx?id=@currentItem.ID.ToString()" method="POST" action="@Url.Action("GoTo", "Shopping")">
                <h3>
                    @Html.Sitecore().Field("Glossary Value", (Item)Factory.GetDatabase("web").GetItem(ItemGuids.GoToGuidItem))<a class="sub-title" href="@allbrands">
                        @Html.Sitecore().Field("Glossary Value", (Item)Factory.GetDatabase("web").GetItem(ItemGuids.AllBrandsGuidItem))<span class="sprite-small-r">&gt;</span>
                    </a>
                </h3>
                <div class="form-group">
                    <div class="brand-select clearfix">
                        <select id="category" name="category" class="selectpicker form-control" data-style="btn-primary">
                            @foreach (var item in categories)
                            {
                                <option value="@item.value" @if (category == item.DisplayName) { <text>
                                        selected="selected"
                                        </text>    }>
                                    @item.text.ToUpper()
                                </option>
                            }
                        </select>
                        @{
                            var parentCategory = categories.SingleOrDefault(p => p.DisplayName == category);
                            var firestCategory = categories.FirstOrDefault();
                            subCategories = parentCategory != null ? parentCategory.children : firestCategory.children.ToList();
                        }

                        @if (shoppingHelper.isShop)
                        {
                            <select id="childcategory" name="childcategory" class="selectpicker form-control" data-style="btn-primary">
                                @if (subCategories.Any())
                                {
                                    foreach (var item in subCategories)
                                    {
                                        <option value="@item.value" @if (subpage == item.DisplayName) { <text>
                                                selected="selected"
                                                </text>               }>
                                            @item.text.ToUpper()
                                        </option>
                                    }
                                }
                            </select>
                        }
                    </div>

                    <input type="hidden" value="@currentItem.Parent.TemplateID.ToString()" name="parentTemplateId" class="selectpicker form-control" />
                    <input type="hidden" value="@ItemGuids.T11PageTemplate" name="pageTemplateId" class="selectpicker form-control" />

                    <button type="submit" class="btn btn-default">@Html.Sitecore().Field("Glossary Value", (Item)Factory.GetDatabase("web").GetItem(ItemGuids.GoGuidItem))</button>
                </div>
            </form>

            @if (allByBrandsPageID != currentItem.ID.ToString() && allByBuildingsPageID != currentItem.ID.ToString() && currentItem.ID.ToString() != ItemGuids.DiningAllByBrandPage && currentItem.ID.ToString() != ItemGuids.DiningAllByBuildingPage)
            {
                <h3>@Html.Sitecore().Field("Glossary Value", (Item)Factory.GetDatabase("web").GetItem(ItemGuids.SeeAlsoGuidItem))</h3>
                <ul>
                    @Html.Sitecore().Rendering(SitecoreRenderingViewGuids.T13RelatedCategoryViewGuid)
                </ul>
            }
        </div>
    </div>
</div>
