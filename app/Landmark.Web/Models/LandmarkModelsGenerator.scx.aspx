<%@ Page Language="C#" ClassName="CodeGenPage" %>
<%@ Import namespace="System.CodeDom.Compiler"  %>
<%@ Import Namespace="Sitecore" %>
<%@ Import Namespace="Sitecore.Data" %>
<%@ Import Namespace="Sitecore.Text" %>

// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

#pragma warning disable 1591

namespace Sitecore.CodeGeneration
{
  #region Designer generated code

  <% foreach(var fieldType in fieldTypes.Values) { %>
   /// <summary>
   /// Represents the strongly named <% =fieldType.SafeName %> class.
   /// </summary>
   public partial class <% =fieldType.SafeName %> {
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Sitecore Code Generator", "1.0.0.0")]    
    public string Value { get; private set; }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Sitecore Code Generator", "1.0.0.0")]    
    public <% =fieldType.SafeName %>(string value) {
      this.Value = value;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Sitecore Code Generator", "1.0.0.0")]    
    public static implicit operator <% =fieldType.SafeName %>(string value) {
      return value == null ? null : new <% =fieldType.SafeName %>(value);
    } 

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Sitecore Code Generator", "1.0.0.0")]    
    public static implicit operator string(<% =fieldType.SafeName%> field) {
      return field == null ? null : field.Value;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Sitecore Code Generator", "1.0.0.0")]    
    public override string ToString() {
      return this.Value;
    }
  }
  <% } %>   


  <% foreach(var template in templates) { %>
  public interface I<% =template.SafeName %><% =WriteBaseInterfaces(templates, template) %> {
  <% foreach(var field in template.Fields) { 
  %>  <% =field.GetFieldType().SafeName %> <% =field.SafeName %> { get; }
  <% } %>}
  <% } %>   

  /// <summary>
  /// Base class for the strongly typed template classes.
  /// </summary>
  public abstract partial class TemplateBase {
  }
  
  <% foreach(var template in templates) { %>
  /// <summary>
  /// Represents the strongly named <% =template.SafeName %> class.
  /// </summary>
  public partial class <% =template.SafeName %> : TemplateBase, I<% =template.SafeName %> {
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Sitecore Code Generator", "1.0.0.0")]    
    public Sitecore.Data.Items.Item InnerItem { get; set; }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Sitecore Code Generator", "1.0.0.0")]    
    public <% =template.SafeName %>(Sitecore.Data.Items.Item item) {
      this.InnerItem = item;  
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Sitecore Code Generator", "1.0.0.0")]    
    public static implicit operator <% =template.SafeName %>(Sitecore.Data.Items.Item item) {
      return item == null ? null : new <% =template.SafeName %>(item);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Sitecore Code Generator", "1.0.0.0")]    
    public static implicit operator Sitecore.Data.Items.Item(<% =template.SafeName %> item) {
      return item == null ? null : item.InnerItem;
    }

  <% foreach(var field in template.Fields) { 
  %>  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Sitecore Code Generator", "1.0.0.0")]
      public <% =field.GetFieldType().SafeName %> <% =field.SafeName %> { get { return new <% =field.GetFieldType().SafeName %>(this.InnerItem["<% =field.Item.ID.ToString() %>"]); } }
  <% } %>

  <% foreach(var field in template.GetInheritedFields()) { 
    %>  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Sitecore Code Generator", "1.0.0.0")]
    <% =field.GetFieldType().SafeName %> I<% =field.OwnerTemplate.SafeName %>.<% =field.SafeName %> { get { return new <% =field.GetFieldType().SafeName %>(this.InnerItem["<% =field.Item.ID.ToString() %>"]); } }
  <% } %>}
  <% } %>   
  #endregion
}

#pragma warning restore 1591

<script language="C#" runat="server"> 

  private readonly List<List<string>> scope = new List<List<string>>();
  private readonly List<Template> templates = new List<Template>();
  private readonly Dictionary<string, FieldType> fieldTypes = new Dictionary<string, FieldType>();
  private CodeDomProvider CodeDomProvider { get; set; }

  protected override void OnLoad(EventArgs e)
  {
    base.OnLoad(e);

    this.CodeDomProvider = CodeDomProvider.CreateProvider("C#");

    this.PushScope();
    
    var fieldTypesRoot = Sitecore.Context.Database.GetItem("/sitecore/system/field types");
    this.GetFieldTypes(this.fieldTypes, fieldTypesRoot);

    //string userDefinedTemplateRoot = ConfigurationManager.AppSettings["UserDefinedTemplateID"];
    string userDefinedTemplateRoot = "{B29EE504-861C-492F-95A3-0D890B6FCA09}";
    //var templateRoot = Sitecore.Context.ContentDatabase.GetItem(ItemIDs.TemplateRoot);
    var templateRoot = Sitecore.Context.ContentDatabase.GetItem(userDefinedTemplateRoot);
    this.GetTemplates(this.templates, templateRoot);

    foreach (var template in templates)
    {
      template.BuildBaseTemplates(template.Item);
    }
  }

  private void GetFieldTypes(Dictionary<string, FieldType> list, Sitecore.Data.Items.Item item)
  {
    if (item.TemplateID == TemplateIDs.TemplateFieldType)
    {
      var fieldType = new FieldType
      {
        Name = item.Name,
        SafeName = GetSafeName(scope, item.Name + "Field")
      };

      list[item.Name.ToLowerInvariant()] = fieldType;

      return;
    }

    foreach (Sitecore.Data.Items.Item child in item.Children)
    {
      GetFieldTypes(list, child);
    }
  }
  
  private void GetTemplates(List<Template> list, Sitecore.Data.Items.Item item)
  {
    if (item.TemplateID == TemplateIDs.Template)
    {
      var template = new Template(this)
      {
        Item = item,
        Name = item.Name,
        SafeName = GetSafeName(scope, item.Name)
      };
      
      list.Add(template);

      this.PushScope();
      scope[scope.Count - 1].Add(template.SafeName);
      scope[scope.Count - 1].Add("InnerItem");
      this.GetTemplateFields(template, item);
      this.PopScope();
      
      return;
    }

    foreach (Sitecore.Data.Items.Item child in item.Children)
    {
      GetTemplates(list, child);
    }
  }

  private void GetTemplateFields(Template template, Sitecore.Data.Items.Item item)
  {
    if (item.TemplateID == TemplateIDs.TemplateField)
    {
      var fieldType = item["Type"];
      if (string.IsNullOrEmpty(fieldType))
      {
        fieldType = "text";
      }
      
      var field = new Field(template.Page)
      {
        Item = item,
        OwnerTemplate = template,
        Name = item.Name,
        SafeName = GetSafeName(scope, item.Name),
        FieldType = fieldType
      };

      template.Fields.Add(field);

      return;
    }

    foreach (Sitecore.Data.Items.Item child in item.Children)
    {
      GetTemplateFields(template, child);
    }
  }

  private string GetSafeName(List<List<string>> scope, string name)
  {
    var safeName = name.Trim();
    if (safeName.StartsWith("__"))
    {
      safeName = safeName.Substring(2);
    }

    safeName = char.ToUpper(safeName[0]) + safeName.Substring(1);

    var n = safeName.IndexOf(' ');
    while (n >= 0)
    {
      safeName = safeName.Substring(0, n) + safeName.Substring(n + 1, 1).ToUpperInvariant() + safeName.Substring(n + 2);
      n = safeName.IndexOf(' ');
    }

    var regex = new Regex(@"[^\p{Ll}\p{Lu}\p{Lt}\p{Lo}\p{Nd}\p{Nl}\p{Mn}\p{Mc}\p{Cf}\p{Pc}\p{Lm}]");

    safeName = regex.Replace(safeName, string.Empty);
    if (safeName[0] != '_' && (!char.IsLetter(safeName, 0) || !CodeDomProvider.IsValidIdentifier(safeName)))
    {
      safeName = string.Concat("_", safeName);
    }

    var result = safeName;
    var index = 1;
    while (scope[scope.Count - 1].Contains(result))
    {
      index++;
      result = safeName + index;
    }

    scope[scope.Count - 1].Add(result);
    return result;
  }

  private void PushScope()
  {
    this.scope.Add(new List<string>());
  }

  private void PopScope()
  {
    this.scope.RemoveAt(this.scope.Count - 1);
  }

  public string WriteBaseInterfaces(List<Template> templates, Template template)
  {
    var first = true;
    var result = new StringBuilder();
    
    foreach(var t in template.GetImmediateBaseTemplates())
    {
      result.Append(first ? " : " : ", ");
      first = false;

      result.Append("I" + t.SafeName);
    }

    return result.ToString();
  }
  
  public Template FindTemplate(ID id)
  {
    foreach (var template in templates)
    {
      if (template.Item.ID == id)
      {
        return template;
      }
    }

    return null;
  }

  public class Template
  {
    public Template(CodeGenPage page)
    {
      this.Page = page;
      this.Fields = new List<Field>();
      this.BaseTemplates = new List<Template>();
    }

    public CodeGenPage Page { get; set; }
    public Sitecore.Data.Items.Item Item { get; set; }
    public string Name { get; set; }
    public string SafeName { get; set; }
    public List<Field> Fields { get; set; }
    public List<Template> BaseTemplates { get; set; }

    public void BuildBaseTemplates(Sitecore.Data.Items.Item item)
    {
      var field = item[FieldIDs.BaseTemplate];
      if (string.IsNullOrEmpty(field))
      {
        return;
      }

      var listString = new ListString(field);
      foreach (var s in listString)
      {
        if (string.IsNullOrEmpty(s))
        {
          continue;
        }
        
        if (!Sitecore.Data.ID.IsID(s))
        {
          continue;
        }

        var id = new ID(s);
        var i = this.Page.FindTemplate(id);
        if (i == null) 
        {
          continue;
        }

        if (BaseTemplates.Contains(i))
        {
          continue;
        }
        
        BaseTemplates.Add(i);

        BuildBaseTemplates(i.Item);
      }
    }

    public List<Template> GetImmediateBaseTemplates()
    {
      var result = new List<Template>();

      var list = new ListString(Item[FieldIDs.BaseTemplate]);

      foreach (var s in list)
      {
        var id = new ID(s);
        var i = this.Page.FindTemplate(id);

        if (i != null)
        {
          result.Add(i);
        }
      }

      return result;
    }

    public List<Field> GetInheritedFields()
    {
      var result = new List<Field>();

      foreach (var baseTemplate in this.BaseTemplates)
      {
        foreach (var field in baseTemplate.Fields)
        {
          result.Add(field);
        }
      }

      return result;
    }    
  }
  
  public class Field
  {
    public Field(CodeGenPage page)
    {
      this.Page = page;
    }
  
    public CodeGenPage Page { get; set; }
    public Sitecore.Data.Items.Item Item { get; set; }
    public Template OwnerTemplate { get; set; }
    public string Name { get; set; }
    public string SafeName { get; set; }
    public string FieldType { get; set; }
    
    public FieldType GetFieldType()
    {
      FieldType result;
      if (!this.Page.fieldTypes.TryGetValue(this.FieldType.ToLowerInvariant(), out result))
      {
        this.Page.fieldTypes.TryGetValue("text", out result);
      }
      
      return result;
    }
  }

  public class FieldType
  {
    public string Name { get; set; }
    public string SafeName { get; set; }
  }
  
  </script>
